this doc serves as a personal documentation file about the js code and notepad for different thoughs and ideas about the js code.

const picked = document.getElementById("pickCol");
    - this line retrives the element with the ID: pickCol in the HTML doc and assigns it to the varaible picked which represents
      the input field colour where the user can pick a desired colour from the colour wheel or put in specific RGB code

const cBtn = document.getElementById("colour");
const rBtn = document.getElementById("rainbow");
const eBtn = document.getElementById("erase");
const clBtn = document.getElementById("clear");
    - these lines retrives buttons with the specified IDS in the argument section of each getElementById method and then assign 
      to corresponding variables such as cbtn cBtn, rBtn, eBtn, and clBtn, these buttons are used to select the different drawing features
      such as the colour, rainbow, erase and clear features

const slider = document.getElementById("slider");
const numSize = document.getElementById("size-value");
const grid = document.getElementById("grid");
    - these lines retrieve the elements with specific IDs from the Html doc and then assign them to the corresponding variables; slider, numSize
      , and grid. where slider represent an input range slider for adjusting the size of the grid, numSize represents a text element to display 
      the current grid size and grid represents the container element where the drawing grid is displayed

let curCol = "#95a984";
let curBtn = "colour";
let curSize = 16;
    - these lines act as the defaul colour, button and size of the colour picker, drawing feature and size of the grid

let mouseHold = false;
document.body.onmousedown = () => (mouseHold = true);
document.body.onmouseup = () => (mouseHold = false);
    - now these lines handle the mouse events for clicking then holding and relasing the mouse buttonm, mouseHold is a flag variable that indicates 
      whether the mouse button is currently being held down or not, when the mouse button is being pressed aka the onmousedown event then mouseHold 
      is set to true, and whent he mouse button is released aka the onmouseup event mouseHold is set the false

picked.addEventListener("input", function (e) {
  curCol = e.target.value;
});
    - these lines adds an event listener to the colour input field picked, such that when the value of the colour input field changes the function is 
      executed and retrieves the new colour value from the even e.target.value and assigns it to the curCol variable which represents the currently 
      selected colour 

cBtn.onclick = function () {
  setCurBtn("colour");
};
rBtn.onclick = function () {
  setCurBtn("rainbow");
};
eBtn.onclick = function () {
  setCurBtn("eraser");
};
clBtn.onclick = function () {
  updateSetup();
};
    - these lines assign click event handlers to the colour, rainbow, eraser, and clear buttons. When a button is clicked, it invokes a corresponding 
      function. clicking the colour button calls the setCurBtn function with the argument "colour", which sets the current drawing mode to "colour". 
      similarly, clicking the rainbow button sets the drawing mode to "rainbow", clicking the eraser button sets it to "eraser", and clicking the 
      clear button calls the updateSetup function

slider.onmousemove = function (e) {
  updateSize(e.target.value);
};
slider.onchange = function (e) {
  deploySize(e.target.value);
};
    - these lines assign event handlers to the slider element, when the slider value is changed by moving the slider to the left or right then releasing 
      the corresponding function is executed, the updateSize function is called with the new value to update the display of the grid size and the deploySize
      function is called with the new value to update the grid size and redraw the grid 

function setCurBtn(nextBtn) {
  activatedBtnListener(nextBtn);
  curBtn = nextBtn;
}
    - this function sets the current drawing feature, curBtn, to the specified value nextBtn, it also calls the activatedBtnListener function to update the visual 
      state of the buttons, highling the currently active button.
        - for example: refer to this code cBtn.onclick = function () {
                                            setCurBtn("colour");
                                         };
        in thise case, when the colour button, cBtn is clicked the setCurBtn function is invoked and the argument colour is passed as the nextBtn parameter, on 
        the other hand it is similar to the other buttons, rbtn, eBtn, clBtn which have similar event handles that invoke the setCurbtn function with different 
        arguments. and when this is called it also calls the mentioned activatedBtnListener which will determine which feature btn was pressed and highlight that 
        btn on the webpage

function setCurSize(nextSize) {
  curSize = nextSize;
}
    - this function sets the current grid size, curSize, to the specified value, nextSize 
    
 function colChange(e) {
  if (e.type === "mouseover" && !mouseHold) {
    return;
  }

  const cell = e.target;
  const currentColor = cell.style.backgroundColor;
  let r, g, b;

  if (curBtn === "colour") {
    cell.style.backgroundColor = curCol;
  } else if (curBtn === "rainbow") {
    const R = Math.floor(Math.random() * 255);
    const G = Math.floor(Math.random() * 255);
    const B = Math.floor(Math.random() * 255);
    cell.style.backgroundColor = `rgb(${R}, ${G}, ${B})`;
  } else if (curBtn === "eraser") {
    cell.style.backgroundColor = "#fff8dc";
  } else if (curBtn === "shading") {
    if (currentColor === "rgb(255, 255, 255)") {
      // If the cell is white, start shading with the current color
      cell.style.backgroundColor = curCol;
    } else {
      // Calculate shading by darkening the current color
      const shadingFactor = 0.1; // Amount to darken the color on each shading

      r = parseInt(currentColor.slice(4, -1).split(",")[0].trim());
      g = parseInt(currentColor.slice(4, -1).split(",")[1].trim());
      b = parseInt(currentColor.slice(4, -1).split(",")[2].trim());

      r = Math.max(r - shadingFactor * 255, 0);
      g = Math.max(g - shadingFactor * 255, 0);
      b = Math.max(b - shadingFactor * 255, 0);

      cell.style.backgroundColor = `rgb(${r}, ${g}, ${b})`;
    }
  }
}
    - this function is called when the mouse is moved over or clicked on a grid cell, it handles the colour change logic based on the fact of which curret feature 
      is at hand represented by curBtn, if the mode is colour, it sets the background colour of the grid cell to the current colour, curCol, of the mode is rainbow,
      then it generates a random RGB colour value which is then applied to the background of the grid cell, if the mode is in eraser then it sets the background colour
      of the grid to the accent colour of #fff8dc, if the mode is shade, then on the grid the colour will get progressivly darker

function activatedBtnListener(newBtn) {
  switch (curBtn) {
    case "colour":
      cBtn.classList.remove("active");
      break;
    case "rainbow":
      rBtn.classList.remove("active");
      break;
    case "eraser":
      eBtn.classList.remove("active");
      break;
  }
  switch (newBtn) {
    case "colour":
      cBtn.classList.add("active");
      break;
    case "rainbow":
      rBtn.classList.add("active");
      break;
    case "eraser":
      eBtn.classList.add("active");
      break;
  }
}
    - now this function updates the visual state of the buttons based on the currently selected drawing mode represented by curBtn, it adds or removes the active class
      in the css file to the highlight the active button.

function setup(scale) {
  grid.style.gridTemplateColumns = `repeat(${scale}, 1fr)`;
  grid.style.gridTemplateRows = `repeat(${scale}, 1fr)`;
  let resolution = scale * scale;
  for (let i = 0; i < resolution; i++) {
    const replacement = document.createElement("div");
    replacement.classList.add("replace-element");
    replacement.style.backgroundColor = "#fff8dc"; // Set the background color
    replacement.addEventListener("mouseover", colChange);
    replacement.addEventListener("mousedown", colChange);
    grid.appendChild(replacement);
  }
}

    - in this function it is responsible for setting up the initial drawing grid based on the specified scale parameter, which represents the ratio of the scale ie: 16 x 16 
      is the scale. To be clear setup takes a scale parameter which represents the desired size of the grid.
    - now grid.style.gridTemplateColumns and grid.style.gridTemplateRows lines set the css styling for the grid element, they use the repeat() to specify the number of columns 
      and rows in the grid based on the scale value, while the 1fr unit ensures that each column and row takes an equal fraction of available space in the grid
    - while let resolution = scale * scale calculates the total number of grid cells needed for the specified scale value
    - the for loop is used to create each grid cell, it iterates resolution times starting from = and incrementing by 1
        - inside the loop a new div element is created using the document.add("replace-element") line which add these css styling class, replace-element" to the newly created grid cell, this call enables the grid cell to be styled 
        - the replacement.style.backgroundColor = "#fff8dc" line sets the background colour of the grid cell the #fff8dc, which is the default and initial background colour for the grid cells
        - then the two event listeners are added to the grid cell: replace.addEventListener("mouseover", colChange) and replace.addEventListener("mousedown", colChange), both these event listeners the colChange function, which is
          when the mouse is moved over to the grid cell or when the mouse button is pressed on the grid cell, these listeners enable the user to draw on the grid by changing the cells background colour based on the current drawing feature
        - lastly, the grid cell, replacement, is appended to the grid element using grid.appendChild(replacement) 
    - overall, the setup function will dynamically create a grid by adding grid cells to the grid element based on the provided scale value, it sets up the necessary css styles 
      and event listeners for each cell, allowing the user to interact with the grid and draw on it 

function updateSize(scale) {
  numSize.innerHTML = `${scale} x ${scale}`;
}
    - this function is responsible for updating the display of the grid size in the numSize element, it takes the scale parameter, representing the size of the grid, then 
      sets the innerHTML property of numSize to a string that displays the current scale value by multiplying the scale value by itself. this function is called when the slide value changes,
      displaying the updated grid size to the user

function updateSetup() {
  grid.innerHTML = "";
  setup(curSize);
}
    - this function is used to update the setup of the grid based on the current size which is represented by curSize, it 
      first clears the contents of the grid element by setting its innerHTML to an empth string, then it calls the setup function, 
      passing the curSize value as the scale parameter, this then ensures that the grid is reinitialized with the updated size, 
      updateSetup gets invoked when the clear button, clBtn, is clicked, which allows the user to reset the grid and start 
      drawing from a blank canvas 

function deploySize(scale) {
  setCurSize(scale);
  updateSize(scale);
  updateSetup();
}
    - the deploySize function is used to deploy and apply a new grid size to the webpage, it takes the scale parameter, representing 
      the new grid size and then performs the following:
        - calls the setCurSize function passing the scale value to update the curSize variable which stores the current grid size
        - then calls the updateSize function, passing the scale value to update the display of the grid size in the numSize element
        - lastly it calls the updateSetup function to update the setup of the grid based on the new size
    - this deploySize function is invokedwhen the slider value changes, ensuring that the new grid size is deployed and displayed in the webpage

window.onload = function () {
  setup(16);
  activatedBtnListener("colour");
};

    - the window.onload is an event handler used to execute code when the web page has finished loading, in this case an anonymous function 
      is assigned to window.onload, where inside the function the initial setup of the project is performed by calling the setup function with
      an inital grid size of 16, this sets up the grid and its initial apperance, then activatedBtnListener is called with the argument colour, 
      this ensures that the colour, cBtn, is initially set as the active button 
    - overall, these lines contribute to the overall functionality of the webpage by updating and deploying the grid size, updating the display 
      of the grid size, and setting up the initial state of the project when the page finishes loading, the functions updateSize, updateSetup, deploySize 
      and the windown.onload event handler work together to ensure the projects behaviour and apperance are properly maintained and updated.  